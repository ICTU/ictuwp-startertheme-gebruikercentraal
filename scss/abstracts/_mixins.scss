@mixin square($size) {
  width: $size;
  height: $size;
}

@mixin ho-padding() {
  padding-left: 2rem;
  padding-right: 2rem;
  box-sizing: border-box;

  @include bp-up(sm) {
    padding-right: 3rem;
    padding-left: 3rem;
  }
}

@mixin ho-container() {
  max-width: $max-width-container;
  margin-left: auto;
  margin-right: auto;
}

@mixin ho-make-container($mw: $max-width-content) {
  max-width: $mw;
  margin-left: auto;
  margin-right: auto;
}

@mixin ho-container-content() {
  max-width: $max-width-inner;
  margin-left: auto;
  margin-right: auto;
}

@mixin backstretch($background: $color-primary) {
  position: relative;
  z-index: 5;

  &:before {
    content: " ";
    display: block;
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    background: $background;
    z-index: -1;
    margin-left: -1000rem;
    margin-right: -1000rem;
  }
}

@mixin bp-up($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }

    // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin bp-down($breakpoint) {

  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    $mw: map-get($breakpoints, $breakpoint) - 1px;

    // Prints a media query based on the value
    @media (max-width: $mw) {
      @content;
    }
  }
    // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin visually-hidden() {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

@mixin gc-box-shadow($color: #000, $trans: 0.15) {
  box-shadow: .4rem .4rem 0 rgba($color, $trans);
}

@mixin gc-last-padding(){
  padding-bottom: 4rem;

  @include bp-up(lg) {
    padding-bottom: 7rem;
  }
}



@mixin gc-section-header {
  font-size: 3.2rem;
  font-family: $font_secondary;
  line-height: 36px;

  @include bp-up(md) {
    font-size: 4.2rem;
    line-height: 44px;
  }
}

@mixin gc-card-image-pantybrown() {
  position: relative;
  overflow: hidden;

  &.card--with-image {

    .card__image {
      background: $gc-pantybrown-xlight;
      padding: 2rem 3rem;
      height: 34rem;


      img {
        @include gc-box-shadow();
        width: 18rem;
        height: auto;
        margin: 3rem auto 5rem;
        object-fit: contain;
      }
    }
  }
}

@mixin gc-page-intro($bg: $intro-bg, $color: $intro-color) {
  @include gc-box-shadow();
  background: $white;
  max-width: $max-width-content;
  margin: 0 auto;

  .entry-header {
    background: $bg;
    color: $color;
    padding: 3rem;
    max-width: none;

    @include bp-up(md) {
      padding: 4rem 5rem;
    }

    h1, h2 {
      color: $color;
    }

    a {
      color: $color;
    }

    p {
      color: $color;
      padding-left: 0;
      padding-right: 0;
    }
  }
}

@mixin gc-bg-rotated($bg: $gc-pantybrown-xlight) {
  position: relative;
  //width: 100%;
  overflow: hidden;
  z-index: 5;
  padding-bottom: 5rem;

  @include bp-up(md) {
    padding-bottom: 8rem;
  }

  &:before {
    position: absolute;
    content: " ";
    background: $bg;
    left: 0;
    right: 0;
    bottom: 0;
    margin: 0 -5rem -5rem;
    top: 15rem;
    transform: rotate(2deg);
  }
}

@mixin gc-add-rotated($bg: $white) {
  position: relative;
  overflow: hidden;

  &:after {
    position: absolute;
    content: " ";
    display: block;
    background: $bg;
    bottom: 0;
    left: 0;
    right: 0;
    height: 6rem;
    transform: rotate(1.5deg);
    margin: 0 -3rem -3rem;
  }
}

@mixin gc-section-heading() {
  font-size: 3.2rem;
  font-family: $font_secondary;
  //text-transform: uppercase; :(
  line-height: 36px;

  @include bp-up(md) {
    font-size: 4.2rem;
    line-height: 44px;
  }
}

@mixin gc-fancy-list($color: $color-primary) {
  margin: 0;
  padding: 0;

  li {
    @include icon(before, arrow);
    list-style: none;
    position: relative;
    padding-left: 2.5rem;

    &:before {
      position: absolute;
      left: 0;
      top: .1rem;
      color: $color;
      font-size: 1.2rem;
    }
  }
}


@mixin negate-padding() {
  margin-left: -2rem;
  margin-right: -2rem;

  @include bp-up(sm){
    margin-left: -3rem;
    margin-right: -3rem;
  }
}


@mixin text-styles() {

  h2,
  h3,
  h4 {
    font-weight: $base-heading-font;

    + p {
      margin-top: 1rem;
    }
  }

  p {
    + .section--related {
      margin-top: 1rem;
    }

    + ul {
      margin-top: 1.6rem;
    }

    + h2,
    + h3,
    + h4 {
      margin-top: $gutter;
    }

    &.arrow {
      background: url('/wp-content/themes/ictuwp-theme-gc2020/flavors/optimaaldigitaal/assets/images/i_pijltje.svg') 0 .8rem no-repeat;
      padding-left: 6rem;
    }
  }

  .media--image {
    img {
      max-width: 100%;
      width: auto;
    }

    + h2,
    + h3,
    + h4,
    p {
      margin-top: 3rem;
    }
  }

  .alignleft {
    float: left;
    margin: 0 2rem .5rem 0;
  }

  .source {
    margin-top: 2rem;
    display: block;
    font-style: italic;
  }

  .btn,
  .link--read-more {
    margin-top: 2rem;
  }
}


@mixin bp-between($start, $end) {

  // If the key exists in the map
  @if map-has-key($breakpoints, $start) and map-has-key($breakpoints, $end)  {
    $bpstart: map-get($breakpoints, $start);
    $bpend: map-get($breakpoints, $end) - 1px;

    // Prints a media query based on the value
    @media (min-width: $bpstart) and (max-width: $bpend) {
      @content;
    }
  }
    // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$start}` or `#{$end}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}
